Подсказки по командной строке
Командна смены директории(переход к файлу через командную строку)

cd c:\folder_name
Если домашняя дериктория то ~

cd ~\folder_name
Команда отображения текущей рериктории MacOs, Linux

pwd
Листинг текущей директории Windows

dir
Linux, MacOs:

ls
Удаление файла

del<filename>
Начало работы с Git hub
Сначала инициализируем папку в которой будем работать через команду

git init
Очистить чат терминала

clear
Проверить статус папки в которой работаем

git status
Вернуться к состоянию предидущего комита( отменить внесенные изменению)

git restore "название файла, пишем 4 буквы и жмем TAB"
Добавить к отслеживанию Git`а(сохранить)

git add "название файла, пишем 4 буквы и жмем TAB"
Посмотреть ветки

git branch
Ключ для переиминовывания ветки мастер -M

git branch -M main
Создание новой ветки

git branch <name>
Переход к нужной ветке

git checkout <name_branch>
Что бы добавить 1 ветку в другую, необходитмо перейти в нужнуя нам ветку и прописать команду

git merge <name_branch>
Что бы удалить не нужную ветку, мы к коменде git branch добавляем -d и указываем имя не нужной нам ветки

git branch -d <name_branch>
Добавляем комментарий к отслеживанию(сохранению)

git commuit -m "коментарий к сохранению"
Что бы гит игнорировал файлы, в рабочей папке создаем файл с названием .gitignore и вносим туда название файлов, которые надо игнорировать. для этого создаем текстовый файл gitignore.txt, а затем в командной строке прописываем(rename):

ren gitignore.txt .gitignore
Посмотреть журнал изменений (сохранения)

git log
Укороченный вариант

git log --oneline
Просмотр с учетом веток

git log --graph
Перейти на нужную версию

git checkout "ВВодим 4 цифры или весь номер версии, взятый из команды "git log"."
Посмотреть разницу между версиями( можно добавить 2 гит лога или после сохранения сравнить с пред идущей версей)

git diff
Вернуться к первоночdальной(основной версии)

git ceckout master
Работа с удаленными репозиториями
Ищем на github.com необходимый нам репозиторий и копируем ссылку, далее:

git clone <ссылка с гитхаба>
Что бы отправить в интернет наши изменения

git push
Что бы взять изменения с удаленного репозитория, необходимо использовать команду

git pull
Что бы работать с репозиторием к которому нет доступа, необходимо на сайте сделать копию на свой аккаунт, через кнопку Fork

Когда мы работаем с чужим проектом, необходимо сперва создать новую ветку и создать новый файл README в котором указываем изменения

Что бы предлоожить изменения изначальному репозиторию, необходимо нажать кнопку на сайте "Compare a pull request"
